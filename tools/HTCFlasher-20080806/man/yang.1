.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "yang 1"
.TH yang 1 "2008-08-06" "yang v1.1" "User commands"
.SH "NAME"
yang \- Yet Another NBH Generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
yang \-F <filename> \-f <file1,file2,...> \-t <type1,type2,...> \-s <chunksize> \-d <device> \-c <\s-1CID\s0> \-v <version> \-l <language>
.PP
or
.PP
yang \-X <filename>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Yang is a tool that allows to create custom \s-1NBH\s0 files from \s-1NB\s0 \s-1ROM\s0 parts.
You can combine all the \s-1NB\s0 \s-1ROM\s0 parts and create a single \s-1NBH\s0 file ready to flash.
The \s-1NBH\s0 files created using yang are not signed with the \s-1HTC\s0 certificate, so
you'll need a method to bypass signature checking on your device bootloader.
This is typically done using methods such as HardSPL, JumpSPL, \s-1USPL\s0, etc. as
published in xda\-developers.com forum.
.PP
Yang can also be used to extract the contents (\s-1ROM\s0 parts) found inside a \s-1NBH\s0
file. If the \s-1NBH\s0 contains a \s-1NB\s0 splash screen, it will also be converted to
\&\s-1BMP\s0 format.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "Extract \s-1NBH\s0 Options:"
.IX Subsection "Extract NBH Options:"
\&\fB\-X\fR Input \s-1NBH\s0 file name.
.Sh "Generate \s-1NBH\s0 Options:"
.IX Subsection "Generate NBH Options:"
All options are mandatory. 
.PP
\&\fB\-F\fR Output \s-1NBH\s0 file name.
.PP
\&\fB\-f\fR Comma separated list of input \s-1NB\s0 files (\s-1ROM\s0 parts).
.PP
\&\fB\-t\fR Comma separated list of input \s-1NB\s0 header types. Must be
in the same order as the \s-1ROM\s0 parts. See the section \s-1NBH\s0 header types
below for more information.
.PP
\&\fB\-s\fR SignMaxChunkSize. This should be 64 or 1024 depending on the
device. For example \s-1HTC\s0 Kaiser uses 64, and \s-1HTC\s0 Excalibur uses 1024.
If you don't know which one uses your device, the best way is to extract
the \s-1NBH\s0 from a shipped \s-1ROM\s0, and generate it again using the extracted
\&\s-1ROM\s0 parts. The generated \s-1NBH\s0 file size should match the original \s-1NBH\s0
file size. Try both values (64 and 1024) and see which one matches your
device.
.PP
\&\fB\-d\fR Device name or Model \s-1ID\s0. This should match the one on your device,
again extract a shipped \s-1NBH\s0 or use the Get Device Info option from \fIHTCFlasher\fR\|(1).
.PP
\&\fB\-c\fR This should match the \s-1CID\s0 on your device, again extract a shipped \s-1NBH\s0
or use the Get Device Info option from \fIHTCFlasher\fR\|(1).
.PP
\&\fB\-v\fR This is just a version number field. You can put whatever you want here.
.PP
\&\fB\-l\fR This is just a language field, generally 3 letters, however you can put
whatever you want here. Typical values are \s-1WWE\s0 for English, \s-1ESN\s0 for spanish,
\&\s-1FRA\s0 for french, etc.
.SH "NBH HEADER TYPES"
.IX Header "NBH HEADER TYPES"
These are the typical values for most common \s-1NBH\s0 header types.
.PP
\&\s-1IPL:\s0 0x100, 0x101, 0x102
.PP
\&\s-1SPL:\s0 0x200
.PP
\&\s-1GSM:\s0 0x300, 0x301
.PP
\&\s-1OS:\s0 0x400, 0x401
.PP
MainSplash: 0x600
.PP
SubSplash: 0x601
.PP
ExtROM: 0x700, 0x900
.PP
To make sure you generate the \s-1NBH\s0 correctly for your device you should
first extract the \s-1NBH\s0 file from a shipped \s-1ROM\s0 and get the header types
for each file from the extracted file names.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Extract the contents from a \s-1NBH\s0 file:
.PP
.Vb 1
\&        yang \-X RUU_signed.nbh
.Ve
.PP
Generate a \s-1NBH\s0 file containing only a Splash Screen, valid for any \s-1HTC\s0 Kaiser device:
.PP
.Vb 1
\&        yang \-F RUU_signed.nbh \-t 0x600 \-f 00_MainSplash_0x600.nb \-s 64 \-d KAIS***** \-c 11111111 \-v 1.0 \-l WWE
.Ve
.PP
Generate a \s-1NBH\s0 file containing a \s-1GSM\s0 radio firmware, an \s-1SPL\s0, a Splash Screen and a WinCE \s-1OS\s0 image, valid for \s-1HTC\s0 Shift devices with \s-1CID\s0 HTC_\|_017:
.PP
.Vb 1
\&        yang \-F RUU_signed.nbh \-t 0x301,0x200,0x600,0x400 \-f GSM.nb,SPL.nb,Splash.nb,OS.nb \-s 64 \-d CLIO10000 \-c HTC__017 \-v 1.30.453.0 \-l USA
.Ve
.PP
Generate a \s-1NBH\s0 file containing \s-1IPL\s0, \s-1SPL\s0, MainSplash, \s-1GSM\s0, \s-1OS\s0 and unknown(0x800) files, for \s-1HTC\s0 Excalibur device:
.PP
.Vb 1
\&        yang \-F RUU_signed.nbh \-f 00_IPL_0x100.nb,01_SPL_0x200.nb,02_MainSplash_0x600.nb,03_GSM_0x300.nb,04_OS_0x400.nb,05_unknown_0x800.nb \-t 0x100,0x200,0x600,0x300,0x400,0x800 \-s 1024 \-d EXCA20000 \-c HTC__001 \-v 1.11.405.4 \-l ENG
.Ve
.PP
.Vb 2
\&        === yang v1.1: Yet Another NBH Generator
\&        === (c) 2008 Pau Oliva Fora \- pof @ XDA\-Developers
.Ve
.PP
.Vb 8
\&        [] Output NBH file: RUU_unsigned.nbh
\&        [] Input files: 00_IPL_0x100.nb,01_SPL_0x200.nb,02_MainSplash_0x600.nb,03_GSM_0x300.nb,04_OS_0x400.nb,05_unknown_0x800.nb
\&        [] Input types: 0x100,0x200,0x600,0x300,0x400,0x800
\&        [] SignMaxChunkSize: 1024
\&        [] Device: EXCA20000
\&        [] CID: HTC__001
\&        [] Version: 1.11.405.4
\&        [] Language: ENG
.Ve
.PP
.Vb 6
\&        [] 0x100 \-\-> 00_IPL_0x100.nb
\&        [] 0x200 \-\-> 01_SPL_0x200.nb
\&        [] 0x600 \-\-> 02_MainSplash_0x600.nb
\&        [] 0x300 \-\-> 03_GSM_0x300.nb
\&        [] 0x400 \-\-> 04_OS_0x400.nb
\&        [] 0x800 \-\-> 05_unknown_0x800.nb
.Ve
.PP
.Vb 1
\&        Done!
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
yang returns a zero exit status if it succeeds to
execute the command. Non zero is returned in case of failure.
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Pau Oliva Fora
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Please report bugs here:
http://code.google.com/p/htc\-flasher/issues/list
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright Â© 2008 Pau Oliva Fora.  License GPLv3+: \s-1GNU\s0 \s-1GPL\s0 version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.  There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIHTCFlasher\fR\|(1)
